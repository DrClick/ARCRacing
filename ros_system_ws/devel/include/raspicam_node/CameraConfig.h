//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the raspicam_node package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __raspicam_node__CAMERACONFIG_H__
#define __raspicam_node__CAMERACONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace raspicam_node
{
  class CameraConfigStatics;
  
  class CameraConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(CameraConfig &config, const CameraConfig &max, const CameraConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const CameraConfig &config1, const CameraConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, CameraConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const CameraConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CameraConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const CameraConfig &config) const = 0;
      virtual void getValue(const CameraConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T CameraConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (CameraConfig::* field);

      virtual void clamp(CameraConfig &config, const CameraConfig &max, const CameraConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const CameraConfig &config1, const CameraConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, CameraConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const CameraConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CameraConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const CameraConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const CameraConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, CameraConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, CameraConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<CameraConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(CameraConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("contrast"==(*_i)->name){contrast = boost::any_cast<int>(val);}
        if("sharpness"==(*_i)->name){sharpness = boost::any_cast<int>(val);}
        if("brightness"==(*_i)->name){brightness = boost::any_cast<int>(val);}
        if("saturation"==(*_i)->name){saturation = boost::any_cast<int>(val);}
        if("ISO"==(*_i)->name){ISO = boost::any_cast<int>(val);}
        if("exposureCompensation"==(*_i)->name){exposureCompensation = boost::any_cast<int>(val);}
        if("videoStabilisation"==(*_i)->name){videoStabilisation = boost::any_cast<bool>(val);}
        if("vFlip"==(*_i)->name){vFlip = boost::any_cast<bool>(val);}
        if("hFlip"==(*_i)->name){hFlip = boost::any_cast<bool>(val);}
        if("shutterSpeed"==(*_i)->name){shutterSpeed = boost::any_cast<int>(val);}
        if("zoom"==(*_i)->name){zoom = boost::any_cast<double>(val);}
        if("exposure_mode"==(*_i)->name){exposure_mode = boost::any_cast<std::string>(val);}
        if("awb_mode"==(*_i)->name){awb_mode = boost::any_cast<std::string>(val);}
      }
    }

    int contrast;
int sharpness;
int brightness;
int saturation;
int ISO;
int exposureCompensation;
bool videoStabilisation;
bool vFlip;
bool hFlip;
int shutterSpeed;
double zoom;
std::string exposure_mode;
std::string awb_mode;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int contrast;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sharpness;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int brightness;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int saturation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int ISO;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposureCompensation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool videoStabilisation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool vFlip;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool hFlip;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int shutterSpeed;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double zoom;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_mode;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string awb_mode;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("CameraConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const CameraConfig &__max__ = __getMax__();
      const CameraConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const CameraConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const CameraConfig &__getDefault__();
    static const CameraConfig &__getMax__();
    static const CameraConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const CameraConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void CameraConfig::ParamDescription<std::string>::clamp(CameraConfig &config, const CameraConfig &max, const CameraConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class CameraConfigStatics
  {
    friend class CameraConfig;
    
    CameraConfigStatics()
    {
CameraConfig::GroupDescription<CameraConfig::DEFAULT, CameraConfig> Default("Default", "", 0, 0, true, &CameraConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.contrast = -100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.contrast = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.contrast = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("contrast", "int", 0, "Contrast", "", &CameraConfig::contrast)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("contrast", "int", 0, "Contrast", "", &CameraConfig::contrast)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sharpness = -100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sharpness = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sharpness = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("sharpness", "int", 0, "Sharpness", "", &CameraConfig::sharpness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("sharpness", "int", 0, "Sharpness", "", &CameraConfig::sharpness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.brightness = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.brightness = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.brightness = 50;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("brightness", "int", 0, "Brightness", "", &CameraConfig::brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("brightness", "int", 0, "Brightness", "", &CameraConfig::brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.saturation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.saturation = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.saturation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("saturation", "int", 0, "Saturation", "", &CameraConfig::saturation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("saturation", "int", 0, "Saturation", "", &CameraConfig::saturation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ISO = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ISO = 1600;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ISO = 400;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("ISO", "int", 0, "ISO", "", &CameraConfig::ISO)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("ISO", "int", 0, "ISO", "", &CameraConfig::ISO)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposureCompensation = -10;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposureCompensation = 10;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposureCompensation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("exposureCompensation", "int", 0, "exposureCompensation", "", &CameraConfig::exposureCompensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("exposureCompensation", "int", 0, "exposureCompensation", "", &CameraConfig::exposureCompensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.videoStabilisation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.videoStabilisation = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.videoStabilisation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("videoStabilisation", "bool", 0, "videoStabilisation", "", &CameraConfig::videoStabilisation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("videoStabilisation", "bool", 0, "videoStabilisation", "", &CameraConfig::videoStabilisation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vFlip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vFlip = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vFlip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("vFlip", "bool", 0, "vFlip", "", &CameraConfig::vFlip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("vFlip", "bool", 0, "vFlip", "", &CameraConfig::vFlip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.hFlip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.hFlip = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.hFlip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("hFlip", "bool", 0, "hFlip", "", &CameraConfig::hFlip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<bool>("hFlip", "bool", 0, "hFlip", "", &CameraConfig::hFlip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.shutterSpeed = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.shutterSpeed = 100000;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.shutterSpeed = 10000;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("shutterSpeed", "int", 0, "shutterSpeed", "", &CameraConfig::shutterSpeed)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<int>("shutterSpeed", "int", 0, "shutterSpeed", "", &CameraConfig::shutterSpeed)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.zoom = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.zoom = 4.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.zoom = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<double>("zoom", "double", 0, "Digital zoom", "", &CameraConfig::zoom)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<double>("zoom", "double", 0, "Digital zoom", "", &CameraConfig::zoom)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_mode = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_mode = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_mode = "auto";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<std::string>("exposure_mode", "str", 0, "Exposure mode", "{'enum_description': 'Exposure modes', 'enum': [{'srcline': 21, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'off', 'ctype': 'std::string', 'type': 'str', 'name': 'off'}, {'srcline': 22, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'auto', 'ctype': 'std::string', 'type': 'str', 'name': 'auto'}, {'srcline': 23, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'night', 'ctype': 'std::string', 'type': 'str', 'name': 'night'}, {'srcline': 24, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'nightpreview', 'ctype': 'std::string', 'type': 'str', 'name': 'nightpreview'}, {'srcline': 25, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'backlight', 'ctype': 'std::string', 'type': 'str', 'name': 'backlight'}, {'srcline': 26, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'spotlight', 'ctype': 'std::string', 'type': 'str', 'name': 'spotlight'}, {'srcline': 27, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'sports', 'ctype': 'std::string', 'type': 'str', 'name': 'sports'}, {'srcline': 28, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'snow', 'ctype': 'std::string', 'type': 'str', 'name': 'snow'}, {'srcline': 29, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'beach', 'ctype': 'std::string', 'type': 'str', 'name': 'beach'}, {'srcline': 30, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'verylong', 'ctype': 'std::string', 'type': 'str', 'name': 'verylong'}, {'srcline': 31, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fixedfps', 'ctype': 'std::string', 'type': 'str', 'name': 'fixedfps'}, {'srcline': 32, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'antishake', 'ctype': 'std::string', 'type': 'str', 'name': 'antishake'}, {'srcline': 33, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fireworks', 'ctype': 'std::string', 'type': 'str', 'name': 'fireworks'}]}", &CameraConfig::exposure_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<std::string>("exposure_mode", "str", 0, "Exposure mode", "{'enum_description': 'Exposure modes', 'enum': [{'srcline': 21, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'off', 'ctype': 'std::string', 'type': 'str', 'name': 'off'}, {'srcline': 22, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'auto', 'ctype': 'std::string', 'type': 'str', 'name': 'auto'}, {'srcline': 23, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'night', 'ctype': 'std::string', 'type': 'str', 'name': 'night'}, {'srcline': 24, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'nightpreview', 'ctype': 'std::string', 'type': 'str', 'name': 'nightpreview'}, {'srcline': 25, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'backlight', 'ctype': 'std::string', 'type': 'str', 'name': 'backlight'}, {'srcline': 26, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'spotlight', 'ctype': 'std::string', 'type': 'str', 'name': 'spotlight'}, {'srcline': 27, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'sports', 'ctype': 'std::string', 'type': 'str', 'name': 'sports'}, {'srcline': 28, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'snow', 'ctype': 'std::string', 'type': 'str', 'name': 'snow'}, {'srcline': 29, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'beach', 'ctype': 'std::string', 'type': 'str', 'name': 'beach'}, {'srcline': 30, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'verylong', 'ctype': 'std::string', 'type': 'str', 'name': 'verylong'}, {'srcline': 31, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fixedfps', 'ctype': 'std::string', 'type': 'str', 'name': 'fixedfps'}, {'srcline': 32, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'antishake', 'ctype': 'std::string', 'type': 'str', 'name': 'antishake'}, {'srcline': 33, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fireworks', 'ctype': 'std::string', 'type': 'str', 'name': 'fireworks'}]}", &CameraConfig::exposure_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.awb_mode = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.awb_mode = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.awb_mode = "auto";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<std::string>("awb_mode", "str", 0, "AWB mode", "{'enum_description': 'AWB modes', 'enum': [{'srcline': 37, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'off', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_off'}, {'srcline': 38, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'auto', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_auto'}, {'srcline': 39, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'sun', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_sun'}, {'srcline': 40, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'cloud', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_cloud'}, {'srcline': 41, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'shade', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_shade'}, {'srcline': 42, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'tungsten', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_tungsten'}, {'srcline': 43, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fluorescent', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_fluorescent'}, {'srcline': 44, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'incandescent', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_incandescent'}, {'srcline': 45, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'flash', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_flash'}, {'srcline': 46, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'horizon', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_horizon'}]}", &CameraConfig::awb_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraConfig::AbstractParamDescriptionConstPtr(new CameraConfig::ParamDescription<std::string>("awb_mode", "str", 0, "AWB mode", "{'enum_description': 'AWB modes', 'enum': [{'srcline': 37, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'off', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_off'}, {'srcline': 38, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'auto', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_auto'}, {'srcline': 39, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'sun', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_sun'}, {'srcline': 40, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'cloud', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_cloud'}, {'srcline': 41, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'shade', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_shade'}, {'srcline': 42, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'tungsten', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_tungsten'}, {'srcline': 43, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'fluorescent', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_fluorescent'}, {'srcline': 44, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'incandescent', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_incandescent'}, {'srcline': 45, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'flash', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_flash'}, {'srcline': 46, 'description': '', 'srcfile': '/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg', 'cconsttype': 'const char * const', 'value': 'horizon', 'ctype': 'std::string', 'type': 'str', 'name': 'awb_horizon'}]}", &CameraConfig::awb_mode)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(CameraConfig::AbstractGroupDescriptionConstPtr(new CameraConfig::GroupDescription<CameraConfig::DEFAULT, CameraConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<CameraConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<CameraConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<CameraConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    CameraConfig __max__;
    CameraConfig __min__;
    CameraConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const CameraConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static CameraConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &CameraConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const CameraConfig &CameraConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const CameraConfig &CameraConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const CameraConfig &CameraConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<CameraConfig::AbstractParamDescriptionConstPtr> &CameraConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<CameraConfig::AbstractGroupDescriptionConstPtr> &CameraConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const CameraConfigStatics *CameraConfig::__get_statics__()
  {
    const static CameraConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = CameraConfigStatics::get_instance();
    
    return statics;
  }

//#line 21 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_off = "off";
//#line 22 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_auto = "auto";
//#line 23 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_night = "night";
//#line 24 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_nightpreview = "nightpreview";
//#line 25 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_backlight = "backlight";
//#line 26 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_spotlight = "spotlight";
//#line 27 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_sports = "sports";
//#line 28 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_snow = "snow";
//#line 29 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_beach = "beach";
//#line 30 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_verylong = "verylong";
//#line 31 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_fixedfps = "fixedfps";
//#line 32 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_antishake = "antishake";
//#line 33 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_fireworks = "fireworks";
//#line 37 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_off = "off";
//#line 38 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_auto = "auto";
//#line 39 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_sun = "sun";
//#line 40 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_cloud = "cloud";
//#line 41 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_shade = "shade";
//#line 42 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_tungsten = "tungsten";
//#line 43 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_fluorescent = "fluorescent";
//#line 44 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_incandescent = "incandescent";
//#line 45 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_flash = "flash";
//#line 46 "/home/pi/code/ARCRacing/ros_system_ws/src/raspicam_node/cfg/Camera.cfg"
      const char * const Camera_awb_horizon = "horizon";
}

#endif // __CAMERARECONFIGURATOR_H__
